#!/bin/bash -e

set -e

CONTAINERNAME="hm_platform_builder_next"
build_container()
{
  if [[ -z $1 ]]; then echo >&2 "Usage: build_container container-name"; return 1; fi 
  # --no-cache can be used as an argument to docker build
  docker build -t "$1" - <<DockerFileHere
  from crops/poky 
  USER root
  RUN apt-get update && \apt-get install -y --no-install-recommends libncurses-dev rsync bc libgnutls28-dev zstd liblz4-tool mtools parted dosfstools u-boot-tools
  RUN wget http://commondatastorage.googleapis.com/git-repo-downloads/repo
  RUN mv repo /usr/bin/
  RUN chmod a+x /usr/bin/repo
  RUN ssh-keyscan -t rsa github.com >> /etc/ssh/ssh_known_hosts
  RUN ssh-keyscan -t rsa gitlab.com >> /etc/ssh/ssh_known_hosts
DockerFileHere
}

# Build container from inline Docker file above
if [[ -z $SKIP_DOCKER_BUILD ]]; then build_container $CONTAINERNAME; fi

# Copy build script template if build_script does not exist
SCRIPTNAME="build_script"
if [[ ! -f $SCRIPTNAME ]]; then
	BID_PATH=$(realpath "$0")
	TEMPLATENAME=$(dirname "$BID_PATH")/${SCRIPTNAME}_template
	cp -v "$TEMPLATENAME" "$SCRIPTNAME"
fi

: "${DL_DIR:="$HOME/YOCTO_DOWNLOADS"}"

# Check that we are not running from within build folder.
if [[ -f conf/local.conf ]]; then
	echo "This is a build folder. Please cd .. and run $0 with build folder $PWD as argument"
	exit 1
fi

# Are we running interactively?
if [[ -t 0 ]] ; then USETTY="-t" ; else unset USETTY; fi

docker run -i $USETTY --rm=true \
  -e DL_DIR="$DL_DIR"\
  -e "SSH_AUTH_SOCK=/ssh.socket" \
  -v "$SSH_AUTH_SOCK:/ssh.socket" \
  -v "${DL_DIR}:${DL_DIR}" \
  -v "${PWD}:${PWD}" \
  --workdir="${PWD}" \
   $CONTAINERNAME  \
   ./$SCRIPTNAME "$@"
