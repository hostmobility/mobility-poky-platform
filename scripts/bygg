#!/bin/bash

# Copyright (C) 2023 Host Mobility AB

# This script builds packages and images for Host Mobility hardware in
# a Docker environment.

set -e

SCRIPT_NAME=$(realpath "$0")
SCRIPT_FOLDER=$(dirname "$SCRIPTNAME")
PLATFORM_FOLDER=$(realpath "$(dirname "$SCRIPT_FOLDER")")

# Parse options or show usage which exits app
usage()
{
  echo "$0 - build bitbake recipes/images using docker"
  echo "Usage: $(basename "$0" ) [options] build-command-to-run"
  echo "options(: means required argument, :: means optional argument)"
  for option in $(echo $LONGOPTIONS | tr , \\n); do
    echo "--$option"
  done
  exit 1
}

parse_options()
{
  LONGOPTIONS='build-tag:,build-folder:,delete-conf,distro:,docker-build-flag-no-cache,help,machine:,manifest-file:,repo-sync,skip-init-build'
  SHORTOPTIONS='t:,b:,c,d:,g,h,m:,f:,s,n'
  options=$(getopt -o "$SHORTOPTIONS" --longoptions "$LONGOPTIONS" -- "$@") || usage
  eval set -- "$options"
  DOCKER_BUILD_FLAGS="--quiet"

  while true; do
    case "$1" in
      '--build-tag'|'-t')
	BUILD_TAG="$2" ; shift 2 ;;
      '--build-folder'|'-b')
	BUILD_FOLDER="$2" ; shift 2 ;;
      '--delete-conf'|'-c')
	DELETE_CONF="y" ; shift ;;
      '--distro'|'-d')
	DISTRO="$2" ; shift 2 ;;
      '--docker-build-flag-no-cache'|'-g')
	DOCKER_BUILD_FLAGS+=" --no-cache" ; shift ;;
      '--machine'|'-m')
	MACHINE="$2" ; shift 2 ;;
      '--manifest-file'|'-f')
	MANIFEST_FILE="$2" ; shift 2 ;;
      '--repo-sync'|'-s')
	DO_SYNC=1 ; shift ;;
      '--skip-init-build'|'-n')
	SKIP_INIT_BUILD=1 ; shift ;;
      '--help'|'-h')
	usage; ;;
      '--')
	shift; break ;;
      *)
	>&2 echo 'BUG, UNHANDLED ARGUMENT!'; exit 2 ;;
    esac
  done
  BUILD_COMMAND=$@

  # Check if MANIFEST_FILE is set and print usage if it's not
  if [[ -z "$MANIFEST_FILE" ]]; then
    >&2 echo "MANIFEST_FILE is not set. Please set it using '--manifest-file' argument."
    ls *.xml
    exit 1
  fi
}

# Initialize Yocto enviroment
init_yocto_build()
{
  POKYFOLDER="sources/poky"

  if [[ ! -e "$POKYFOLDER" ]]; then
    echo "$POKYFOLDER does not exist. Syncing repos..."
    sync_manifest
  fi

  if [[ $MACHINE == imx8mp-var-dart-hmx1 ]]; then
    export TEMPLATECONF=${PWD}/sources/meta-mobility-poky-distro/conf/templates/hmx
    [[ -d "$TEMPLATECONF" ]] || export TEMPLATECONF=${PWD}/sources/meta-mobility-poky-distro/conf/hmx
    : "${BUILD_FOLDER:=build-hmx}"
  else
    export TEMPLATECONF=${PWD}/sources/meta-mobility-poky-distro/conf/templates/generic
    [[ -d "$TEMPLATECONF" ]] || export TEMPLATECONF=${PWD}/sources/meta-mobility-poky-distro/conf/generic
    : "${BUILD_FOLDER:=build}"
  fi

  CONF_PATH="${BUILD_FOLDER}/conf"
  [ -d "${CONF_PATH}" ] \
  && [ -n "${DELETE_CONF}" ] \
  && rm -rf ${CONF_PATH} && echo "deleted $CONF_PATH"
  
  source "$POKYFOLDER/oe-init-build-env" "$BUILD_FOLDER"

  # Set Downloads folder in conf/local.conf if $DL_DIR is a folder and not yet set
  if [[ -d $DL_DIR ]]; then
    grep "DL_DIR=" conf/local.conf || echo "DL_DIR=\"$DL_DIR\"" >> conf/local.conf;
  fi

  # Pass information about versions to bitbake
  export BB_ENV_PASSTHROUGH_ADDITIONS="$BB_ENV_PASSTHROUGH_ADDITIONS BUILD_TAG PLATFORM_VERSION PLATFORM_VERSION_DETAILS"
  PLATFORM_VERSION="$(git -C ../.repo/manifests rev-parse --short HEAD)"
  export PLATFORM_VERSION
  PLATFORM_VERSION_DETAILS="$(get_platform_details)"
  export PLATFORM_VERSION_DETAILS
}
export -f init_yocto_build

configure_git_if_needed()
{
  if ! git config user.email; then
    git config --global user.email "support@hostmobility.com"
    git config --global user.name "Host Mobility Support"
    git config --global color.ui true
  fi
}

sync_manifest()
{
  configure_git_if_needed

  if ! git -C "$PLATFORM_FOLDER" diff --quiet HEAD -- "$MANIFEST_FILE"; then
    git -C "$PLATFORM_FOLDER" status
    echo "$MANIFEST_FILE HAS CHANGES. PLEASE COMMIT FIRST!"
    exit 1
  fi

  # Find out branch of platform repo
  MANIFEST_COMMIT_HASH="$(git -C "$PLATFORM_FOLDER" rev-parse HEAD)"
  # Synchronize bitbake layer repos the manifest in this repo
  repo init file://"$PLATFORM_FOLDER" -b "$MANIFEST_COMMIT_HASH" -m "$MANIFEST_FILE"
  echo "ðŸŒ² NOTE: Build is based on manifest file $MANIFEST_FILE revision $MANIFEST_COMMIT_HASH"
  repo sync
}
get_platform_details()
(
  repo forall -c 'echo $REPO_PATH\nLREV: $REPO_LREV\nRREV: $REPO_RREV; git diff --stat -b $REPO_LREV..HEAD ; echo -n "Commit: " ; git rev-parse HEAD ; echo -n "Uncommited changes: " ; git status -b -s ; git diff --stat -b ; echo '
)

CONTAINER_NAME="byggcontainer:crops-ubuntu-20.04"
build_container()
{
  docker build $DOCKER_BUILD_FLAGS -t "$CONTAINER_NAME" - <<DockerFileHere
  from crops/poky:ubuntu-20.04
  USER root
  RUN apt-get update && \apt-get install -y --no-install-recommends libncurses-dev rsync bc libgnutls28-dev zstd liblz4-tool mtools parted dosfstools u-boot-tools
  RUN wget http://commondatastorage.googleapis.com/git-repo-downloads/repo
  RUN mv repo /usr/bin/
  RUN chmod a+x /usr/bin/repo
  RUN ssh-keyscan -t rsa github.com >> /etc/ssh/ssh_known_hosts
  RUN ssh-keyscan -t rsa gitlab.com >> /etc/ssh/ssh_known_hosts
  RUN ssh-keyscan -p 2222 -t rsa gitlab.alkit.se >> /etc/ssh/ssh_known_hosts
DockerFileHere
}

# ----------------  SCRIPT STARTS HERE ----------------------

parse_options $@

# Restart script inside Docker container if not already there.
if [[ "$RUNNING_IN_DOCKER" != "1" ]]; then
  # Build container from inline Docker file above
  build_container

  # Are we running interactively?
  if [[ -t 0 ]] ; then USETTY="-t" ; else unset USETTY; fi

  docker run -i $USETTY --rm=true \
	 -e RUNNING_IN_DOCKER=1 \
	 -e DL_DIR="$DL_DIR"\
	 -e "SSH_AUTH_SOCK=/ssh.socket" \
	 -v "$SSH_AUTH_SOCK:/ssh.socket" \
	 -v "${DL_DIR}:${DL_DIR}" \
	 -v "${PLATFORM_FOLDER}:${PLATFORM_FOLDER}" \
	 --workdir="${PLATFORM_FOLDER}" \
	 $CONTAINER_NAME  \
	 "$SCRIPT_NAME" "$@"
  # Build finished, return the Docker container exit status.
  exit $?
fi

# ----------------  Running inside container ----------------


YOCTO_FOLDER="$PLATFORM_FOLDER/$(basename $MANIFEST_FILE .xml)"

mkdir -p "$YOCTO_FOLDER"
cd "$YOCTO_FOLDER" || exit 1

if [[ -n $DO_SYNC ]]; then
  sync_manifest
fi

# Setup bitbake, leaves us in build folder
if [[ -z $SKIP_INIT_BUILD ]]; then init_yocto_build "$BUILD_FOLDER"; fi

export MACHINE MANIFEST_REPO MANIFEST_BRANCH MANIFEST_FILE DISTRO BUILD_TAG

# Show usage if no build command is given
if [[ -z "$*" ]]; then usage; fi

# Call build command
[ -n "$BUILD_COMMAND" ] && $BUILD_COMMAND

